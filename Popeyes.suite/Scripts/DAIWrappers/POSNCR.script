(** 
ScriptName: POSNCR
Version 1.0
Author: Sajeendra Das
CreatedOn: 4/22/25
PeerReviewedBy:
PeerReviewedOn:
EditedBy: 
EditedOn: 
Description:  Handlers specific to the POS Operations on the NCR POS platform.
**)

(**
"This software is copyright Keysight Technologies, Inc. and licensed under the terms of Keysight’s End User License Agreement. Terms of Keysight’s EULA may be found here: www.keysight.com/find/sweula By using this Software, you agree to the terms of the Keysight EULA."
**) 

(**  
loginToNCRPOS - Handler to login to the NCR POS SUT.
@Version 1.0 4/22/2025
@ChangeReason Creation
**)
to loginToNCRPOS 
	Log "Running Script:"&&item 1 delimited by ".script" of my name &"."& param(0)
	
	// If NCR POS is already logged in and in the New Order screen, skip steps to login
	if ImageFound(text:"New Order", waitFor:Config().Waits.(minWait),SearchRectangle:Config().SearchRectangles.(LeftHalf)) 
		log "NCR POS is already in Logged in State"
	else
		// Wait for the Enter Employee Number screen
		WaitFor Config().Waits.(maxWait), text:"Enter Employee Number", SearchRectangle:Config().SearchRectangles.(TopHalf)
		
		// IF any errors are seen, click to dismiss
		if ImageFound(text:"Errors have occurred", waitFor:Config().Waits.(minWait))
			click FoundImageLocation()
			wait 1
		end if
		
		//Enter Employee Code and Click OK to login
		Log "Entering Passcode"
		put DataFile().Logins.NCRPOS.employeeCode into passCode
		
		repeat for each character in passCode
			click text:it, SearchRectangle: Config().SearchRectangles.(NCRSoftKeypadLogin), waitFor: 1
			wait 1
		end repeat
		
		WaitFor Config().Waits.(maxWait), text:"OK", SearchRectangle:Config().SearchRectangles.(NCRSoftKeypadLogin)
		click FoundImageLocation()
		
		// Validate login to NCR
		assert that ImageFound(text:"New Order", waitFor:Config().Waits.(maxWait),SearchRectangle:Config().SearchRectangles.(LeftHalf)) with error "NCR POS Login Validation"
		
	end if
	
	Log "End of Script:"&&item 1 delimited by ".script" of my name &"."& param(0)
	
end loginToNCRPOS

(**  
selectDiningOption - Handler to select the Dining Option on NCR POS, Dine In, Take Out etc.
@Version 1.0 4/22/2025
@ChangeReason Creation
**)
to selectDiningOption
	Log "Running Script:"&&item 1 delimited by ".script" of my name &"."& param(0)
	
	// Read the DataFile to get the Column Number which has the Dining Option stored
	put DataFile().ColumnMapping.(global posPlatformName).DiningOption into excelColumnName
	
	// Read the Excel to get the Data Value for the Dining Option
	put Common.readDataFromExcel (excelColumnName) into diningOption
	
	if diningOption is not empty
		// Select the Dining Option on the screen
		Click text:diningOption, waitFor:Config().Waits.(minWait),SearchRectangle:Config().SearchRectangles.(NCRItemSelectionArea)
		
		// Validate that the Main Course Selection screen has opened up
		assert that ImageFound(text:"Repeat", waitFor:Config().Waits.(minWait),SearchRectangle:Config().SearchRectangles.(NCRItemSelectionArea)) with error "Dining Option Selection"
	end if
	
	Log "End of Script:"&&item 1 delimited by ".script" of my name &"."& param(0)
	
end selectDiningOption

(**  
selectMainCourse - Handler to select the Main Course, Chicken, Seafood etc
@Version 1.0 4/22/2025
@ChangeReason Creation
**)
to selectMainCourse
	Log "Running Script:"&&item 1 delimited by ".script" of my name &"."& param(0)
	//Select Main Course 
	// Read the DataFile to get the Column Number which has the Dining Option stored
	put DataFile().ColumnMapping.(global posPlatformName).MainCourse into excelColumnName
	
	// Read the Excel to get the Data Value for the Main Course
	put Common.readDataFromExcel (excelColumnName) into mainCourse
	
	if mainCourse is not empty
		split mainCourse by ","
		
		// Select Main Course and additional selections if any
		repeat for each item of mainCourse
			if ImageFound(text:trim(it), waitFor:Config().Waits.(minWait),SearchRectangle:Config().SearchRectangles.(NCRMainCourseSelectionArea), ignoreSpaces: Yes, ignoreNewLines: Yes)
				click FoundImageLocation() 
				wait 1
			else if ImageFound(text:trim(it), waitFor:Config().Waits.(minWait),SearchRectangle:Config().SearchRectangles.(NCRItemSelectionArea), ignoreSpaces: Yes, ignoreNewLines: Yes)
				click FoundImageLocation()
				wait 1
			end if
		end repeat
	end if
	// Data is maintained comma-separated if multiple options are needed to be clicked. Split the string by "," and click options one by one
	
	
	Log "End of Script:"&&item 1 delimited by ".script" of my name &"."& param(0)
	
end selectMainCourse

(**  
selectMealAndOption - Handler to select the Meal like, BFLY SHRIMP, PopCorn Shrimp etc. And meal option like Combo, Regular etc.
@Version 1.0 4/22/2025
@ChangeReason Creation
**)
to selectMealAndOption
	Log "Running Script:"&&item 1 delimited by ".script" of my name &"."& param(0)
	//Select Meal  
	// Read the DataFile to get the Column Number which has the Meal, Meal Option and Display Names stored
	put DataFile().ColumnMapping.(global posPlatformName).SelectMeal into excelColumnName
	put Common.readDataFromExcel (excelColumnName) into selectMeal
	
	put DataFile().ColumnMapping.(global posPlatformName).SelectMealOption into excelColumnName
	put Common.readDataFromExcel (excelColumnName) into selectMealOption
	
	put DataFile().ColumnMapping.(global posPlatformName).MealDisplayName into excelColumnName
	put Common.readDataFromExcel (excelColumnName) into mealDisplayName
	
	// Select Meal
	if selectMeal is not empty
		// Data is maintained comma-separated if multiple options are needed to be clicked. Split the string by "," and click options one by one
		split selectMeal by ","
		
		// Select Meal and additional selections if any
		repeat for each item of selectMeal
			if ImageFound(text:trim(it), waitFor:Config().Waits.(minWait),SearchRectangle:Config().SearchRectangles.(NCRItemSelectionArea), ignoreSpaces: Yes, ignoreNewLines: Yes)
				click FoundImageLocation() 
				wait 1
			end if
		end repeat
	end if
	
	
	// Select Meal Option
	if selectMealOption is not empty
		if ImageFound(text:"Would you like to make it a Large combo", waitFor:Config().Waits.(minWait),SearchRectangle:Config().SearchRectangles.(NCRItemSelectionArea))
			put FoundImageInfo().imagerectangle +[0,0,200,200] into clickArea
			click text: "No", waitFor:Config().Waits.(minWait),SearchRectangle:clickArea
		end if
		
		// Click Meal Option on screen
		Click text:selectMealOption, waitFor:Config().Waits.(minWait),SearchRectangle:Config().SearchRectangles.(NCRItemSelectionArea), ignoreSpaces: Yes, ignoreNewLines: Yes
		
	end if
	
	if selectMeal is not empty or selectMealOption is not empty
		// Validate that Meal gets added to the order
		//assert that ImageFound(text:mealDisplayName, waitFor:Config().Waits.(minWait),SearchRectangle:Config().SearchRectangles.(NCROrdersArea), validCharacters: mealDisplayName, validWords: mealDisplayName, ignoreSpaces: Yes, ignoreNewLines: Yes) with error "Meal Added to Order"
		assert that common.extendedFindText(mealDisplayName,Config().Waits.(minWait), Config().SearchRectangles.(NCROrdersArea)) is true with error "Meal Added to Order"
	end if
	
	Log "End of Script:"&&item 1 delimited by ".script" of my name &"."& param(0)
	
end selectMealAndOption

(**  
selectFlavors - Handler to select the Flavors like BBQ Sauce, Ranch etc
@Version 1.0 4/22/2025
@ChangeReason Creation
**)
to selectFlavors
	Log "Running Script:"&&item 1 delimited by ".script" of my name &"."& param(0)
	
	// Read the DataFile to get the Column Number which has the Flavor Options stored
	put DataFile().ColumnMapping.(global posPlatformName).Flavors into excelColumnName
	
	// Read the Excel to get the Data Value for the Flavors
	put Common.readDataFromExcel (excelColumnName) into flavors
	
	if flavors is not empty
		//Select Flavors on the Orders Section First
		WaitFor Config().Waits.(maxWait), text:"Flavor", SearchRectangle:Config().SearchRectangles.(NCROrdersArea), ignoreSpaces: Yes, ignoreNewLines: Yes
		click FoundImageLocation()
		wait 1
		
		// Data is maintained comma-separated if multiple options are needed to be clicked. Split the string by "," and click options one by one
		split flavors by ","
		
		// Select Flavors
		repeat for each item of flavors
			// IF Flavors text is found in the orders area, click it
			if imagefound (text:"Flavor", WaitFor: Config().Waits.(minWait), SearchRectangle:Config().SearchRectangles.(NCROrdersArea), ignoreSpaces: Yes, ignoreNewLines: Yes)
				click FoundImageLocation()
				wait 1
			end if
			
			// Select Flavor
			if ImageFound(text:trim(it), waitFor:Config().Waits.(minWait),SearchRectangle:Config().SearchRectangles.(NCRItemSelectionArea), ignoreSpaces: Yes, ignoreNewLines: Yes, caseSensitive: Yes)
				click FoundImageLocation() 
				wait 1
			end if
		end repeat
		
		
		// Validate Flavors are added, by ensuring "Flavor" text is not found in Orders area
		assert that not ImageFound(text:"Flavor", waitFor:2,SearchRectangle:Config().SearchRectangles.(NCROrdersArea), ignoreSpaces: Yes, ignoreNewLines: Yes, ) with error "Side Added to Order"
	end if
	
	Log "End of Script:"&&item 1 delimited by ".script" of my name &"."& param(0)
	
end selectFlavors

(**  
selectSides - Handler to select the Sides like Mash Gravyy, Rice etc
@Version 1.0 4/22/2025
@ChangeReason Creation
**)
to selectSides
	Log "Running Script:"&&item 1 delimited by ".script" of my name &"."& param(0)
	
	// Read the DataFile to get the Column Number which has the Sides Options stored
	put DataFile().ColumnMapping.(global posPlatformName).Sides into excelColumnName
	
	// Read the Excel to get the Data Value for the Sides
	put Common.readDataFromExcel (excelColumnName) into sides
	
	if sides is not empty
	(*		
		//Select Sides on the Orders Section First
		WaitFor Config().Waits.(maxWait), text:"Sides", SearchRectangle:Config().SearchRectangles.(NCROrdersArea), ignoreSpaces: Yes, ignoreNewLines: Yes
		click FoundImageLocation()
		wait 1*)
		
		// Data is maintained comma-separated if multiple options are needed to be clicked. Split the string by "," and click options one by one
		split sides by ","
		
		// Select Sides
		repeat for each item of sides
			// IF Flavors text is found in the orders area, click it
			if imagefound (text:"Sides", WaitFor: Config().Waits.(minWait), SearchRectangle:Config().SearchRectangles.(NCROrdersArea), ignoreSpaces: Yes, ignoreNewLines: Yes)
				click FoundImageLocation()
				wait 2
			end if
			
			if Common.extendedFindText(trim(it),Config().Waits.(minWait),Config().SearchRectangles.(NCRItemSelectionArea)) is true
				click FoundImageLocation() 
				wait 5
			end if
			
		end repeat
		
		// Validate Sides are added, by ensuring "Sides" text is not found in Orders area
		assert that not ImageFound(text:"Sides", waitFor:2,SearchRectangle:Config().SearchRectangles.(NCROrdersArea), ignoreSpaces: Yes, ignoreNewLines: Yes, ) with error "Side Added to Order"
	end if
	
	Log "End of Script:"&&item 1 delimited by ".script" of my name &"."& param(0)
	
end selectSides


(**  
selectDrink - Handler to select the Drink like CocaCola, DrPepper etc
@Version 1.0 4/22/2025
@ChangeReason Creation
**)
to selectDrink
	Log "Running Script:"&&item 1 delimited by ".script" of my name &"."& param(0)
	
	// Read the DataFile to get the Column Number which has the Drink Options stored
	put DataFile().ColumnMapping.(global posPlatformName).Drink into excelColumnName
	
	// Read the Excel to get the Data Value for the Drink
	put Common.readDataFromExcel (excelColumnName) into drink
	
	if drink is not empty
		
		//Select Drinks on the Orders Section First
		WaitFor Config().Waits.(maxWait), text:"Drink", SearchRectangle:Config().SearchRectangles.(NCROrdersArea), ignoreSpaces: Yes, ignoreNewLines: Yes
		click FoundImageLocation()
		wait 1
		
		// Data is maintained comma-separated if multiple options are needed to be clicked. Split the string by "," and click options one by one
		split drink by ","
		
		// Select Drink by clicking the image of the drink
		repeat for each item of drink
			// IF an Image of Drink exists, click Image. If not, do an OCR search for the Drink
			if file (suiteinfo().imagesFolder&"/Icons/Drinks/"&it&".png") exists or if file (suiteinfo().imagesFolder&"/Icons/Drinks/"&it) exists
				if ImageFound(image:"Icons/Drinks/"&trim(it), waitFor:Config().Waits.(minWait),SearchRectangle:Config().SearchRectangles.(NCRItemSelectionArea))
					click FoundImageLocation() 
					wait 1
				end if
			else
				if ImageFound(text:trim(it), waitFor:Config().Waits.(minWait),SearchRectangle:Config().SearchRectangles.(NCRItemSelectionArea), ignoreSpaces: Yes, ignoreNewLines: Yes)
					click FoundImageLocation() 
					wait 5
				end if
			end if
			
		end repeat
		
		// Validate Sides are added, by ensuring "Sides" text is not found in Orders area
		assert that not ImageFound(text:"Drink", waitFor:2,SearchRectangle:Config().SearchRectangles.(NCROrdersArea), ignoreSpaces: Yes, ignoreNewLines: Yes, ) with error "Drink Added to Order"
	end if
	
	Log "End of Script:"&&item 1 delimited by ".script" of my name &"."& param(0)
	
end selectDrink


(**  
proceedToTender - Handler to click the Total button to proceed to tender
@Version 1.0 4/22/2025
@ChangeReason Creation
**)
to proceedToTender
	Log "Running Script:"&&item 1 delimited by ".script" of my name &"."& param(0)
	
	// Click Total button on the Orders Section First
	WaitFor Config().Waits.(maxWait), text:"Total", SearchRectangle:Config().SearchRectangles.(NCROrdersAreaOptions), ignoreSpaces: Yes, ignoreNewLines: Yes
	click FoundImageLocation()
	wait 1
	
	// If Loyalty prompt shows up, click Not Today
	if ImageFound(text:"Not Today", waitFor:Config().Waits.(minWait),SearchRectangle:Config().SearchRectangles.(NCRItemSelectionArea),  ignoreSpaces: Yes, ignoreNewLines: Yes,)
		click FoundImageLocation() 
		wait 1
	end if
	
	// Validate Tenders screen has opened
	assert that ImageFound(text:"Payments", waitFor:2,SearchRectangle:Config().SearchRectangles.(NCRItemSelectionArea), ignoreSpaces: Yes, ignoreNewLines: Yes, ) with error "Tenders Screen"
	
	//Call handler to read and save the Order ID in a global parameter
	saveOrderID
	
	Log "End of Script:"&&item 1 delimited by ".script" of my name &"."& param(0)
end proceedToTender


(**  
exactPayment - Handler to click the Exact button to pay with Exact amount of order
@Version 1.0 4/22/2025
@ChangeReason Creation
**)
to exactPayment
	Log "Running Script:"&&item 1 delimited by ".script" of my name &"."& param(0)
	
	// Click Exact button on the Order First
	WaitFor Config().Waits.(maxWait), text:"Exact", SearchRectangle:Config().SearchRectangles.(NCRItemSelectionArea), ignoreSpaces: Yes, ignoreNewLines: Yes
	click FoundImageLocation()
	wait 1
	
	// Validate User is taken back to the New Order screen
	assert that ImageFound(text:"New Order", waitFor:Config().Waits.(maxWait),SearchRectangle:Config().SearchRectangles.(LeftHalf)) with error "NCR POS Login Validation"
	
	// Before executing the receipt validation, send a dummy POS order with 6 Wings and 4 Sides to push the receipts up into frame
	sendDummyPOSOrder
	
	// Disconnects from NCR POS
	Common.disconnectFromNCRPOS
	
	Log "End of Script:"&&item 1 delimited by ".script" of my name &"."& param(0)
end exactPayment


(**  
saveOrderID - Handler to read the order ID from the NCR screen and return the value, if needed for DAI
@Version 1.0 4/22/2025
@ChangeReason Creation
**)
to saveOrderID
	Log "Reading Order ID"
	put readText(Config().SearchRectangles.(NCROrderID)) into global orderID
	log "Order ID is: "&global orderID
	return global orderID
end saveOrderID


(**  
validateNCRReceipt - Handler to open the NCR receipt SUTs accordingly for validation.
@Version 1.0 7/9/2025
@ChangeReason Creation
**)
to validateNCRReceipt
	Log "Running Script:"&&item 1 delimited by ".script" of my name &"."& param(0)
	
	put DataFile().ColumnMapping.(global posPlatformName).SidesValidation into excelColumnName
	put Common.readDataFromExcel (excelColumnName) into sidesValidation
	
	put DataFile().ColumnMapping.(global posPlatformName).ProteinValidation into excelColumnName
	put Common.readDataFromExcel (excelColumnName) into proteinValidation
	
	// To launch the NcrProtein SUT
	if proteinValidation is "YES"
		// Connect to the NCRProtein SUT
		Log "Launching the NCRProtein SUT"
		Connect DataFile().SUTNames.NCRProtein, visible: Yes
		Wait 1
		
		// Click to wake up the screen as it will be on sleep mode by default
		click Config().TextOffsets.(ClickMobileScreenOffset)
		Wait 2
		
		// Call the receipt validation handler
		validateProteinReceipt
	else if proteinValidation is "NO"
		Log "This order does not have protein."
	end if
	
	// To launch the NcrSandSidesDesserts SUT
	if sidesValidation is "YES"
		// Connect to the NCRSandSidesDesserts SUT
		Log "Launching the NCRSandSidesDesserts SUT"
		Connect DataFile().SUTNames.NCRSandSidesDesserts, visible: Yes
		Wait 1
		
		// Click to wake up the screen as it will be on sleep mode by default
		click Config().TextOffsets.(ClickMobileScreenOffset)
		Wait 2
		
		// Call the receipt validation handler
		validateSandSidesDessertsReceipt
	else if sidesValidation is "NO"
		Log "This order does not have sandwiches/sides/desserts."
	end if
	
	// Call Handler to validate the NCR Expo Receipt
	validateNCRExpoReceipt
	
	// Call Handler to validate the NCR Customer Receipt. Commenting this out as per Customer's instruction. Validating Customer receipt is challenging as the receipt gets cut off and goes not stay in the view of the camera currently.
	//validateNCRCustomerReceipt
	
	Log "End of Script:"&&item 1 delimited by ".script" of my name &"."& param(0)
end validateNCRReceipt


(**  
validateProteinReceipt - Handler to validate the NCR Protein Receipt.
@Version 1.0 7/9/2025
@ChangeReason Creation
**)
to validateProteinReceipt
	Log "Running Script:"&&item 1 delimited by ".script" of my name &"."& param(0)
	
	put DataFile().ColumnMapping.(global posPlatformName).ProteinDisplayName into excelColumnName
	put Common.readDataFromExcel (excelColumnName) into mealDisplayName
	
	// Validate the Order ID is found in the list of receipts
	Assert that common.extendedFindText(global orderID, Config().Waits.(minWait), Config().SearchRectangles.(MobileReceiptArea)) is true with error "Protein Receipt Order ID"
	
	if mealDisplayName is not empty
		
		split mealDisplayName by ","
		
		// Validate the Protein Receipt
		repeat for each item of mealDisplayName
			
			//Validate the items are displayed on the receipt
			assert that common.extendedFindText(trim(it),Config().Waits.(minWait),Config().SearchRectangles.(MobileReceiptArea)) is true with error "Items Displayed on Receipt"
			
		end repeat
		
	end if
	
	// Disconnect Mobile SUT
	disconnect DataFile().SUTNames.NCRProtein
	
	Log "End of Script:"&&item 1 delimited by ".script" of my name &"."& param(0)
end validateProteinReceipt


(**  
validateSandSidesDessertsReceipt - Handler to validate the NCR Sandwiches, Sides & Desserts Receipt.
@Version 1.0 7/9/2025
@ChangeReason Creation
**)
to validateSandSidesDessertsReceipt
	Log "Running Script:"&&item 1 delimited by ".script" of my name &"."& param(0)
	
	put DataFile().ColumnMapping.(global posPlatformName).SandSidesDessertsDisplayName into excelColumnName
	put Common.readDataFromExcel (excelColumnName) into mealDisplayName
	
	// Validate the Order ID is found in the list of receipts
	Assert that common.extendedFindText(global orderID, Config().Waits.(minWait),Config().SearchRectangles.(MobileReceiptArea)) is true with error "Sandwiches/Sides/Desserts Receipt Order ID"
	
	if mealDisplayName is not empty
		
		split mealDisplayName by ","
		
		// Validate the SandSidesDesserts Receipt
		repeat for each item of mealDisplayName
			
			//Validate the items are displayed on the receipt
			assert that common.extendedFindText(trim(it),Config().Waits.(minWait),Config().SearchRectangles.(MobileReceiptArea)) is true with error "Items Displayed on Receipt"
			
		end repeat
		
	end if
	
	// Disconnect Mobile SUT
	disconnect DataFile().SUTNames.NCRSandSidesDesserts
	
	Log "End of Script:"&&item 1 delimited by ".script" of my name &"."& param(0)
end validateSandSidesDessertsReceipt


(**  
validateNCRExpoReceipt - Handler to validate the NCR Expo Receipt.
@Version 1.0 7/9/2025
@ChangeReason Creation
**)
to validateNCRExpoReceipt
	Log "Running Script:"&&item 1 delimited by ".script" of my name &"."& param(0)
	
	put DataFile().ColumnMapping.(global posPlatformName).ExpoLabelDisplayName into excelColumnName
	put Common.readDataFromExcel (excelColumnName) into mealDisplayName
	
	// Launch the NCR Expo SUT
	Connect DataFile().SUTNames.NCRExpo, visible: Yes
	Wait 1
	
	// Click to wake up the screen as it will be on sleep mode by default
	click Config().TextOffsets.(ClickMobileScreenOffset)
	Wait 1
	
	// Validate the Order ID is found in the list of receipts
	Assert that common.extendedFindText(global orderID, Config().Waits.(minWait),Config().SearchRectangles.(MobileReceiptArea)) is true with error "Order ID present on the receipt."
	
	if mealDisplayName is not empty
		
		split mealDisplayName by ","
		
		// Validate the Expo Receipt
		repeat for each item of mealDisplayName
			
			//Validate the items are displayed on the receipt
			assert that common.extendedFindText(trim(it),Config().Waits.(minWait),Config().SearchRectangles.(MobileReceiptArea)) is true with error "Items Displayed on Receipt"
			
		end repeat
		
	end if
	
	// Disconnect Mobile SUT
	disconnect DataFile().SUTNames.NCRExpo
	
	Log "End of Script:"&&item 1 delimited by ".script" of my name &"."& param(0)
end validateNCRExpoReceipt


(**  
validateNCRCustomerReceipt - Handler to validate the NCR Customer Receipt.
@Version 1.0 7/9/2025
@ChangeReason Creation
**)
to validateNCRCustomerReceipt
	Log "Running Script:"&&item 1 delimited by ".script" of my name &"."& param(0)
	
	put DataFile().ColumnMapping.(global posPlatformName).ReceiptDisplayName into excelColumnName
	put Common.readDataFromExcel (excelColumnName) into mealDisplayName
	
	// Launch the NCR Customer Receipt SUT
	Connect DataFile().SUTNames.NCRCustReceipt, visible: Yes
	Wait 1
	
	// Click to wake up the screen as it will be on sleep mode by default
	click Config().TextOffsets.(ClickMobileScreenOffset)
	
	// Validate that the order ID is displayed on the receipt
	assert that imageFound(text: global orderID, waitFor:Config().Waits.(minWait),SearchRectangle:Config().SearchRectangles.(ReceiptTopHalf), ignoreSpaces: Yes) with warning "Customer Receipt Order ID"
	
	if mealDisplayName is not empty
		
		split mealDisplayName by ","
		
		// Validate the orders on the Customer Receipt
		repeat for each item of mealDisplayName
			//Validate the items are displayed on the receipt
			assert that common.extendedFindText(trim(it),Config().Waits.(midWait),Config().SearchRectangles.(MobileReceiptArea)) with warning "Items Displayed on Receipt"
		end repeat
	end if
	
	// Disconnect Mobile SUT
	disconnect DataFile().SUTNames.NCRCustReceipt
	
	Log "End of Script:"&&item 1 delimited by ".script" of my name &"."& param(0)
end validateNCRCustomerReceipt


(**  
sendDummyPOSOrder - Handler to send another order into the POS System to push the receipts up for validation
@Version 1.0 7/28/2025
@ChangeReason Creation
**)
to sendDummyPOSOrder
	Log "Running Script:"&&item 1 delimited by ".script" of my name &"."& param(0)
	
	// Code assumes that this handler is called immediately after a regular order is bumped. So, the KDS window is ready to interact with
	(*	// Launch POS
	Common.launchNCRPOS
	loginToNCRPOS*)
	
	// Select Order and Complete it
	// Select Dine In
	Click text:"Dine In", waitFor:Config().Waits.(minWait),SearchRectangle:Config().SearchRectangles.(NCRItemSelectionArea)
	assert that ImageFound(text:"Repeat", waitFor:Config().Waits.(minWait),SearchRectangle:Config().SearchRectangles.(NCRItemSelectionArea)) with error "Dining Option Selection"
	
	// Select Chicken and then 4 Boneless Wings
	Click text:"Chicken", waitFor:Config().Waits.(minWait),SearchRectangle:Config().SearchRectangles.(NCRMainCourseSelectionArea)
	wait 1
	Click imageName:"Icons/NCRQty4", waitFor:Config().Waits.(minWait),SearchRectangle:Config().SearchRectangles.(NCRItemSelectionArea)
	
	Click text:"1 BONELESS WING", waitFor:Config().Waits.(minWait),SearchRectangle:Config().SearchRectangles.(NCRItemSelectionArea), ignoreSpaces: Yes, ignoreNewLines: Yes
	wait 1
	
	// Select Desserts Sides and then 5 Cole Slaw
	Click text:"Sides", waitFor:Config().Waits.(minWait),SearchRectangle:Config().SearchRectangles.(NCRMainCourseSelectionArea)
	wait 1
	Click imageName:"Icons/NCRQty5", waitFor:Config().Waits.(minWait),SearchRectangle:Config().SearchRectangles.(NCRItemSelectionArea)
	
	Click text:"COLE SLAW", waitFor:Config().Waits.(minWait),SearchRectangle:Config().SearchRectangles.(NCRItemSelectionArea), ignoreSpaces: Yes, ignoreNewLines: Yes
	wait 1
	
	// Proceed to Tender. Save order ID in a different Order and Complete Order
	WaitFor Config().Waits.(maxWait), text:"Total", SearchRectangle:Config().SearchRectangles.(NCROrdersAreaOptions), ignoreSpaces: Yes, ignoreNewLines: Yes
	click FoundImageLocation()
	wait 1
	
	// If Loyalty prompt shows up, click Not Today
	if ImageFound(text:"Not Today", waitFor:Config().Waits.(minWait),SearchRectangle:Config().SearchRectangles.(NCRItemSelectionArea),  ignoreSpaces: Yes, ignoreNewLines: Yes,)
		click FoundImageLocation() 
		wait 1
	end if
	
	// Validate Tenders screen has opened. Complete Payment
	assert that ImageFound(text:"Payments", waitFor:2,SearchRectangle:Config().SearchRectangles.(NCRItemSelectionArea), ignoreSpaces: Yes, ignoreNewLines: Yes, ) with error "Tenders Screen"
	put readText(Config().SearchRectangles.(NCROrderID)) into global dummyOrderID
	
	// Click Exact button on the Order First
	WaitFor Config().Waits.(maxWait), text:"Exact", SearchRectangle:Config().SearchRectangles.(NCRItemSelectionArea), ignoreSpaces: Yes, ignoreNewLines: Yes
	click FoundImageLocation()
	wait 1
	
	// Validate User is taken back to the New Order screen
	assert that ImageFound(text:"New Order", waitFor:Config().Waits.(maxWait),SearchRectangle:Config().SearchRectangles.(LeftHalf)) with error "NCR POS Login Validation"
	
	Log "End of Script:"&&item 1 delimited by ".script" of my name &"."& param(0)
end sendDummyPOSOrder

(**  
bumpDummyPOSOrder - Handler to Bump the Dummy POS Order to push the receipts up for validation
@Version 1.0 7/28/2025
@ChangeReason Creation
**)
to bumpDummyPOSOrder
	Log "Running Script:"&&item 1 delimited by ".script" of my name &"."& param(0)
	
	// Code assumes that this handler is called immediately after a regular order is bumped. So, the KDS window is ready to interact with
	(*	// Launch KDS
	Common.connectToLocalSingleSystem
	
	// If Command Center window is already opened from previous session, close it
	if ImageFound(text:"Command Center", waitFor:2, searchRectangle: Config().SearchRectangles.(TopHalf))
		//Click Command Center window.
		click FoundImageLocation()
		wait 1
	end if
	wait 1
	// Use Handler to open VNC connection for  FC EXPO
	Common.launchNCRVNC "FCExpo"
	// Bring SUT into focus
	Connect {serverID: "127.0.0.1", portNum:5500, Visible: "Yes"} *)
	
	// Bump
	put EveryImageRectangle(text:global dummyOrderID, waitFor:Config().Waits.(minWait), contrast: on, DPI: 144) into orderList	
	put the first item of orderList into orderRect
	put orderRect +[-200,-200,600,600] into displayRect
	
	click the center of orderRect
	WaitFor Config().Waits.(minWait), text:"Bump Order", SearchRectangle:displayRect
	click FoundImageLocation()
	wait 5
	
	// Disconnect from KDs
	Disconnect {serverID: "127.0.0.1", portNum:5500, Visible: "Yes"}
	
	Log "End of Script:"&&item 1 delimited by ".script" of my name &"."& param(0)
end bumpDummyPOSOrder